{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n// https://github.com/dapphub/ds-pause\r\ncontract DSPauseAbstract {\r\n    function delay() public view returns (uint256);\r\n    function plot(address, bytes32, bytes memory, uint256) public;\r\n    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flop.sol\r\ncontract FlopAbstract {\r\n    function kicks() public view returns (uint256);\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ncontract VatAbstract {\r\n    function dai(address) public view returns (uint256);\r\n    function sin(address) public view returns (uint256);\r\n    function suck(address, address, uint256) external;\r\n}\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vow.sol\r\ncontract VowAbstract {\r\n    function sin(uint256) public view returns (uint256);\r\n    function Sin() public view returns (uint256);\r\n    function Ash() public view returns (uint256);\r\n    function sump() public view returns (uint256);\r\n    function kiss(uint256) external;\r\n    function flop() external returns (uint256);\r\n}\r\n\r\n\r\ncontract SpellAction {\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    string  constant public description = \"March 2020 MakerDAO Flop Unblock Spell\";\r\n\r\n    // The contracts in this list should correspond to MCD core contracts, verify\r\n    //  against the current release list at:\r\n    //     https://changelog.makerdao.com/releases/mainnet/1.0.4/contracts.json\r\n    //\r\n    // Contract addresses pertaining to the SCD ecosystem can be found at:\r\n    //     https://github.com/makerdao/sai#dai-v1-current-deployments\r\n    address constant public MCD_VAT  = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\r\n    address constant public MCD_VOW  = 0xA950524441892A31ebddF91d3cEEFa04Bf454466;\r\n    address constant public MCD_FLOP = 0x4D95A049d5B0b7d32058cd3F2163015747522e99;\r\n\r\n    uint256 constant public WAD = 10**18;\r\n    uint256 constant public RAD = 10**45;\r\n    uint256 constant public MILLION = 10**6;\r\n    uint256 constant public HOUR = 3600; // in seconds\r\n    uint256 constant public DAY = 24 * HOUR; // in seconds\r\n\r\n    uint256 constant public T2020_03_27_1200EDT = 1585324800;\r\n\r\n    function execute() external {\r\n        // Must start after noon EDT on 2020/03/27\r\n        require(now >= T2020_03_27_1200EDT, \"too-soon\");\r\n\r\n        uint256 diff = now - T2020_03_27_1200EDT;\r\n\r\n        // Must start within a two hour window of the daily start time\r\n        require(diff % DAY <= 2*HOUR, \"not within two hours of noon EDT\");\r\n\r\n        // Must start on a weekday\r\n        require((diff / DAY) != 1 && (diff / DAY) != 2, \"not a weekday\");\r\n\r\n        // This check ensures there are no unbid flops active\r\n        require(FlopAbstract(MCD_FLOP).kicks() == 86, \"possibility-of-unbid-flops\");\r\n\r\n        // reconcile as much Ash as possible, then unstick\r\n        uint256 joy = VatAbstract(MCD_VAT).dai(MCD_VOW);\r\n        uint256 Ash = VowAbstract(MCD_VOW).Ash();\r\n        require(joy < Ash);\r\n        VowAbstract(MCD_VOW).kiss(joy);\r\n        Ash = Ash - joy;  // safe because kiss did not revert\r\n\r\n        // The remaining Ash is stuck; convert it to woe.\r\n        VatAbstract(MCD_VAT).suck(MCD_VOW, MCD_VOW, Ash);\r\n        VowAbstract(MCD_VOW).kiss(Ash);\r\n\r\n        // Ash is zero now, so woe is just Awe - Sin\r\n        uint256 woe  = VatAbstract(MCD_VAT).sin(MCD_VOW) - VowAbstract(MCD_VOW).Sin();\r\n        uint256 sump = VowAbstract(MCD_VOW).sump();\r\n        while (woe >= sump) {\r\n            VowAbstract(MCD_VOW).flop();\r\n            woe -= sump;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DssSpell {\r\n\r\n    DSPauseAbstract  public pause =\r\n        DSPauseAbstract(0xbE286431454714F511008713973d3B053A2d38f3);\r\n    address          public action;\r\n    bytes32          public tag;\r\n    uint256          public eta;\r\n    bytes            public sig;\r\n    uint256          public expiration;\r\n    bool             public done;\r\n\r\n    uint256 constant internal MILLION = 10**6;\r\n    uint256 constant internal WAD = 10**18;\r\n\r\n    constructor() public {\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        action = address(new SpellAction());\r\n        bytes32 _tag;\r\n        address _action = action;\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n        expiration = now + 30 days;\r\n    }\r\n\r\n    function description() public view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function schedule() public {\r\n        require(now <= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = now + DSPauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n\r\n        // NOTE: 'eta' check should mimic the old behavior of 'done', thus\r\n        // preventing these SCD changes from being executed again.\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"contract DSPauseAbstract\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DssSpell","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","LicenseType":"GNU GPLv3","SwarmSource":"bzzr://8f1c46234fc4f8b9b62574ddba7d9328c3724f653b59fc2412cba547b1ff1267"}]}